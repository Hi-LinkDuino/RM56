# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/aafwk/standard/aafwk.gni")
import("//foundation/ace/ace_engine/ace_config.gni")
import(
    "//foundation/ace/ace_engine/adapter/ohos/services/uiservice/uiservicems.gni")

ohos_prebuilt_etc("ui_service.cfg") {
  relative_install_dir = "init"
  source = "ui_service.cfg"
  part_name = ace_engine_part
  subsystem_name = "ace"
}

group("uiservice_target") {
  deps = [ ":uiservice" ]
}

group("unittest") {
  testonly = true

  deps = [ "test:unittest" ]
}

config("uiservicems_config") {
  include_dirs = [
    "include/",
    "${innerkits_path}/base/include",
    "${services_path}/common/include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//prebuilts/jdk/jdk8/linux-x86/include",
    "//prebuilts/jdk/jdk8/linux-x86/include/linux",
    "//third_party/json/include",
    "//foundation/ace/ace_engine/interfaces/innerkits/ui_service_manager/include",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base/include",
    "${innerkits_path}/want/include",
    "//foundation/windowmanager/interfaces/innerkits",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "//third_party/icu/icu4c/source/common",
    "//third_party/icu/icu4c/source/i18n",
    "//third_party/icu/icu4c/source/ohos",
    "//third_party/icu/icu4c/source",
    "//base/global/i18n_standard/frameworks/intl/include",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

template("uiservice_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    part_name = ace_engine_part
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    sources = uiservice_files
    configs = [
      ":uiservicems_config",
      "$ace_root:ace_config",
      "$ace_flutter_engine_root:flutter_config",
    ]

    deps = [
      "${innerkits_path}/want:want",
      "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
      "//foundation/aafwk/standard/interfaces/innerkits/base:base",
      "//foundation/ace/ace_engine/interfaces/innerkits/ui_service_manager:ui_service_mgr",
      "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
      "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core:appexecfwk_core",
      "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
      "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
      "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
      "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",
      "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
      "//foundation/multimodalinput/input/frameworks/proxy:libmmi-common",
      "//foundation/windowmanager/wm:libwm",
      "//third_party/icu/icu4c:shared_icui18n",
      "//third_party/icu/icu4c:shared_icuuc",
      "//utils/native/base:utils",
    ]

    deps += [ "//foundation/ace/ace_engine/adapter/ohos/services/uiservice/dialog_ui/dialog_picker/js:dialog_picker_js_files_etc" ]

    deps += [ "$ace_root/build:libace" ]

    external_deps = [
      "ability_base:zuri",
      "ability_runtime:ability_manager",
      "ability_runtime:runtime",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
    ]
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  if (platform == "ohos") {
    # generate uiservice_static lib
    uiservice_static("uiservice_static_" + item.name) {
      defines = []
      config = {
      }

      if (defined(item.config)) {
        config = item.config
      }

      if (defined(config.defines)) {
        defines = config.defines
      }

      if (defined(config.cflags_cc)) {
        cflags_cc = config.cflags_cc
      }
    }
  }
}

ohos_shared_library("uiservice") {
  deps = [ ":uiservice_static_ohos" ]
  part_name = ace_engine_part
  subsystem_name = "ace"
}

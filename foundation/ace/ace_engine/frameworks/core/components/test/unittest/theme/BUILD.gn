# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ace/ace_engine/ace_config.gni")

if (is_standard_system) {
  module_output_path = "ace_engine_standard/backenduicomponent/theme"
} else {
  module_output_path = "ace_engine_full/backenduicomponent/theme"
}

ohos_unittest("ThemeManagerTest") {
  module_out_path = module_output_path

  sources = [
    # properties
    "$ace_root/frameworks/core/components/common/properties/border.cpp",
    "$ace_root/frameworks/core/components/common/properties/border_edge.cpp",
    "$ace_root/frameworks/core/components/common/properties/color.cpp",
    "$ace_root/frameworks/core/components/common/properties/text_style.cpp",
    "$ace_root/frameworks/core/mock/mock_ace_application_info.cpp",

    # theme
    "$ace_root/frameworks/core/components/theme/app_theme.cpp",
    "$ace_root/frameworks/core/components/theme/theme_attributes.cpp",
    "$ace_root/frameworks/core/components/theme/theme_constants.cpp",
    "$ace_root/frameworks/core/components/theme/theme_manager.cpp",
    "$ace_root/frameworks/core/components/theme/theme_utils.cpp",
    "$root_out_dir/ace/framework/core/components/theme/theme_constants_default.cpp",

    # animation
    "$ace_root/frameworks/core/animation/animator.cpp",
    "$ace_root/frameworks/core/animation/anticipate_curve.cpp",
    "$ace_root/frameworks/core/animation/cubic_curve.cpp",
    "$ace_root/frameworks/core/animation/curves.cpp",
    "$ace_root/frameworks/core/animation/scheduler.cpp",

    # common
    "$ace_root/frameworks/core/common/ace_application_info.cpp",
    "$ace_root/frameworks/core/common/ace_engine.cpp",
    "$ace_root/frameworks/core/common/container.cpp",
    "$ace_root/frameworks/core/common/container_scope.cpp",
    "$ace_root/frameworks/core/common/thread_checker.cpp",
    "$ace_root/frameworks/core/common/window.cpp",

    # event
    "$ace_root/frameworks/core/event/back_end_event_manager.cpp",
    "$ace_root/frameworks/core/mock/mock_watch_dog.cpp",
    "theme_manager_test.cpp",
    "theme_mock.cpp",
  ]

  # add sources only needed by wearable like watch.
  if (is_wearable_product) {
    sources += [ "$root_out_dir/ace/framework/core/components/theme/theme_constants_watch.cpp" ]
  }

  # add sources needed by phone and TV. wearable like watch do not need them
  if (!is_wearable_product) {
    sources += [
      # theme
      "$root_out_dir/ace/framework/core/components/theme/theme_constants_tv.cpp",
    ]
  }

  configs = [
    ":config_theme_manager_test",
    "$ace_root:ace_test_config",
  ]

  deps = [
    "$ace_root/adapter/ohos/osal:ace_osal_ohos",
    "$ace_root/frameworks/core/components/theme:build_theme_code",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  if (!is_standard_system) {
    sources += [
      "$ace_root/frameworks/bridge/common/dom/dom_type.cpp",
      "$ace_root/frameworks/bridge/common/utils/utils.cpp",
      "$ace_root/frameworks/core/mock/mock_resource_adapter.cpp",
    ]
    deps += [ "$ace_root/frameworks/base:ace_base_ohos" ]
    external_deps = [
      "hilog:libhilog",
      "resmgr:resourcemanager",
      "startup:syspara",
    ]
  } else {
    subsystem_name = "ace"
    part_name = "ace_engine_standard"
    sources += [
      "$ace_root/frameworks/base/geometry/animatable_dimension.cpp",
      "$ace_root/frameworks/base/log/dump_log.cpp",
      "$ace_root/frameworks/base/utils/base_id.cpp",
    ]
    external_deps = [
      "hiviewdfx_hilog_native:libhilog",
      "startup_l2:syspara",
    ]
    configs += [ "//base/startup/syspara_lite/interfaces/innerkits/native/syspara:syspara_config" ]
  }
  subsystem_name = "ace"
  part_name = "ace_engine_full"
}

ohos_unittest("ThemeConstantsTest") {
  module_out_path = module_output_path

  sources = [
    # base
    "$ace_root/frameworks/base/json/json_util.cpp",
    "$ace_root/frameworks/base/log/dump_log.cpp",
    "$ace_root/frameworks/base/utils/base_id.cpp",

    # properties
    "$ace_root/frameworks/core/components/common/properties/border.cpp",
    "$ace_root/frameworks/core/components/common/properties/border_edge.cpp",
    "$ace_root/frameworks/core/components/common/properties/color.cpp",
    "$ace_root/frameworks/core/components/common/properties/text_style.cpp",
    "$ace_root/frameworks/core/mock/mock_ace_application_info.cpp",

    # theme
    "$ace_root/frameworks/core/components/theme/app_theme.cpp",
    "$ace_root/frameworks/core/components/theme/theme_attributes.cpp",
    "$ace_root/frameworks/core/components/theme/theme_constants.cpp",
    "$ace_root/frameworks/core/components/theme/theme_manager.cpp",
    "$ace_root/frameworks/core/components/theme/theme_utils.cpp",
    "$root_out_dir/ace/framework/core/components/theme/theme_constants_default.cpp",

    # animation
    "$ace_root/frameworks/core/animation/animator.cpp",
    "$ace_root/frameworks/core/animation/anticipate_curve.cpp",
    "$ace_root/frameworks/core/animation/cubic_curve.cpp",
    "$ace_root/frameworks/core/animation/curves.cpp",
    "$ace_root/frameworks/core/animation/scheduler.cpp",

    # common
    "$ace_root/frameworks/base/geometry/animatable_dimension.cpp",
    "$ace_root/frameworks/base/memory/memory_monitor.cpp",
    "$ace_root/frameworks/core/common/ace_application_info.cpp",
    "$ace_root/frameworks/core/common/ace_engine.cpp",
    "$ace_root/frameworks/core/common/container.cpp",
    "$ace_root/frameworks/core/common/container_scope.cpp",
    "$ace_root/frameworks/core/common/thread_checker.cpp",
    "$ace_root/frameworks/core/common/window.cpp",

    # event
    "$ace_root/frameworks/core/event/back_end_event_manager.cpp",
    "$ace_root/frameworks/core/mock/mock_watch_dog.cpp",
    "theme_constants_test.cpp",
    "theme_mock.cpp",

    # mock
    "$ace_root/frameworks/core/mock/mock_system_properties.cpp",
  ]

  # add sources only needed by wearable like watch.
  if (is_wearable_product) {
    sources += [ "$root_out_dir/ace/framework/core/components/theme/theme_constants_watch.cpp" ]
  }

  # add sources needed by phone and TV. wearable like watch do not need them
  if (!is_wearable_product) {
    sources += [
      # theme
      "$root_out_dir/ace/framework/core/components/theme/theme_constants_tv.cpp",
    ]
  }

  configs = [
    ":config_theme_manager_test",
    "$ace_root:ace_test_config",
  ]

  deps = [
    "$ace_root/build/external_config/cJSON:third_party_cjson",
    "$ace_root/frameworks/core/components/theme:build_theme_code",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [
      "hiviewdfx_hilog_native:libhilog",
      "startup_l2:syspara",
    ]
    deps += [ "$ace_flutter_engine_root/icu:ace_libicu_ohos" ]
    configs += [ "//base/startup/syspara_lite/interfaces/innerkits/native/syspara:syspara_config" ]
  } else {
    external_deps = [
      "hilog:libhilog",
      "startup:syspara",
    ]
  }

  sources += [
    "$ace_root/adapter/ohos/osal/log_wrapper.cpp",
    "$ace_root/frameworks/core/mock/mock_resource_adapter.cpp",
  ]
  if (!is_standard_system) {
    subsystem_name = "ace"
    part_name = "ace_engine_full"
  } else {
    subsystem_name = "ace"
    part_name = "ace_engine_standard"
  }
}

config("config_theme_manager_test") {
  visibility = [ ":*" ]
  include_dirs = [
    "//utils/native/base/include",
    "$ace_root",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    #":ThemeConstantsTest",
    ":ThemeManagerTest",
  ]
}

# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/ace/ace_engine/ace_config.gni")

action("build_theme_code") {
  script = "tools/build_theme_code.py"
  inputs = [ "theme.csv" ]
  outputs = [
    "$root_out_dir/ace/framework/core/components/theme/",
    "$root_out_dir/ace/framework/core/components/theme/theme_constants_default.cpp",
    "$root_out_dir/ace/framework/core/components/theme/theme_constants_watch.cpp",
    "$root_out_dir/ace/framework/core/components/theme/theme_constants_tv.cpp",
  ]
  args = [
    rebase_path(inputs[0], root_build_dir),
    rebase_path(outputs[0], root_build_dir),
  ]
}

# build core theme sources
template("ace_core_components_theme_set") {
  forward_variables_from(invoker, "*")
  ohos_source_set(target_name) {
    part_name = ace_engine_part
    defines += invoker.defines
    configs = [ "$ace_root:ace_config" ]
    deps = [
      ":build_theme_code",
      "$ace_flutter_engine_root/skia:ace_skia_$platform",
    ]

    sources = [
      "$root_out_dir/ace/framework/core/components/theme/theme_constants_default.cpp",
      "app_theme.cpp",
      "theme_attributes.cpp",
      "theme_constants.cpp",
      "theme_manager.cpp",
      "theme_utils.cpp",
    ]

    # add sources only needed by wearable like watch.
    if (is_wearable_product) {
      sources += [ "$root_out_dir/ace/framework/core/components/theme/theme_constants_watch.cpp" ]
    } else {
      sources += [ "$root_out_dir/ace/framework/core/components/theme/theme_constants_tv.cpp" ]
    }
  }
}

foreach(item, ace_platforms) {
  ace_core_components_theme_set("ace_core_components_theme_" + item.name) {
    defines = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }
    if (defined(config.defines)) {
      defines = config.defines
      platform = item.name
    }
  }
}

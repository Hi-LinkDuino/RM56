# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ace/ace_engine/ace_config.gni")

module_output_path = "ace_engine_full/graphicalbasicability/focus"

ohos_unittest("FocusTest") {
  module_out_path = module_output_path

  sources = [
    "$ace_root/frameworks/core/accessibility/accessibility_node.cpp",
    "$ace_root/frameworks/core/animation/animatable_data.cpp",
    "$ace_root/frameworks/core/animation/animatable_properties.cpp",
    "$ace_root/frameworks/core/animation/animator.cpp",
    "$ace_root/frameworks/core/animation/anticipate_curve.cpp",
    "$ace_root/frameworks/core/animation/cubic_curve.cpp",
    "$ace_root/frameworks/core/animation/curves.cpp",
    "$ace_root/frameworks/core/animation/scheduler.cpp",
    "$ace_root/frameworks/core/common/ace_application_info.cpp",
    "$ace_root/frameworks/core/common/ace_engine.cpp",
    "$ace_root/frameworks/core/common/container.cpp",
    "$ace_root/frameworks/core/common/container_scope.cpp",
    "$ace_root/frameworks/core/common/thread_checker.cpp",
    "$ace_root/frameworks/core/common/vibrator/vibrator_proxy.cpp",
    "$ace_root/frameworks/core/components/box/render_box.cpp",
    "$ace_root/frameworks/core/components/common/properties/color.cpp",
    "$ace_root/frameworks/core/components/common/properties/decoration.cpp",
    "$ace_root/frameworks/core/components/common/properties/scroll_bar.cpp",
    "$ace_root/frameworks/core/components/common/properties/shadow.cpp",
    "$ace_root/frameworks/core/components/refresh/render_refresh.cpp",
    "$ace_root/frameworks/core/components/scroll/render_multi_child_scroll.cpp",
    "$ace_root/frameworks/core/components/scroll/render_scroll.cpp",
    "$ace_root/frameworks/core/components/scroll/render_single_child_scroll.cpp",
    "$ace_root/frameworks/core/components/scroll/scroll_bar_controller.cpp",
    "$ace_root/frameworks/core/event/key_event.cpp",
    "$ace_root/frameworks/core/focus/focus_node.cpp",
    "$ace_root/frameworks/core/pipeline/base/component.cpp",
    "$ace_root/frameworks/core/pipeline/base/element.cpp",
    "$ace_root/frameworks/core/pipeline/base/render_element.cpp",
    "$ace_root/frameworks/core/pipeline/base/render_node.cpp",
    "focus_test.cpp",

    #mock
    "$ace_root/adapter/ohos/osal/log_wrapper.cpp",
    "$ace_root/frameworks/base/geometry/animatable_dimension.cpp",
    "$ace_root/frameworks/base/geometry/animatable_matrix4.cpp",
    "$ace_root/frameworks/base/geometry/matrix4.cpp",
    "$ace_root/frameworks/base/geometry/quaternion.cpp",
    "$ace_root/frameworks/base/geometry/transform_util.cpp",
    "$ace_root/frameworks/base/json/json_util.cpp",
    "$ace_root/frameworks/base/log/dump_log.cpp",
    "$ace_root/frameworks/base/memory/memory_monitor.cpp",
    "$ace_root/frameworks/base/thread/background_task_executor.cpp",
    "$ace_root/frameworks/base/utils/base_id.cpp",
    "$ace_root/frameworks/core/components/test/unittest/mock/ace_trace_mock.cpp",
    "$ace_root/frameworks/core/components/test/unittest/mock/event_report_mock.cpp",
    "$ace_root/frameworks/core/mock/mock_ace_application_info.cpp",
    "$ace_root/frameworks/core/mock/mock_resource_adapter.cpp",
    "$ace_root/frameworks/core/mock/mock_system_properties.cpp",
    "$ace_root/frameworks/core/mock/mock_watch_dog.cpp",
  ]

  configs = [
    "$ace_root:ace_test_config",
    "$ace_flutter_engine_root:flutter_config",
  ]

  deps = [
    "$ace_root/build/external_config/cJSON:third_party_cjson",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]
  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
    deps += [ "$ace_flutter_engine_root/icu:ace_libicu_ohos" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  if (!is_standard_system) {
    subsystem_name = "ace"
    part_name = "ace_engine_full"
  } else {
    subsystem_name = "ace"
    part_name = "ace_engine_standard"
  }
}

group("unittest") {
  testonly = true

  deps = [ ":FocusTest" ]
}

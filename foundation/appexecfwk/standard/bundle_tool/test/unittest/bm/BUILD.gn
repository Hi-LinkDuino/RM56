# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../bundletool.gni")

module_output_path = "bundle_tool/tools"

config("tools_bm_config_mock") {
  include_dirs = [
    "${inner_api_path}/appexecfwk_base/include",
    "${inner_api_path}/appexecfwk_core/include/bundlemgr",
    "${innerkits_path}/libeventhandler/include",
    "${appexecfwk_path}/services/bundlemgr/include",
    "${appexecfwk_path}/services/bundlemgr/include/sandbox_app",
    "${bundletool_test_path}/mock",
    "//base/security/permission/interfaces/innerkits/permission_standard/permissionsdk/main/cpp/include",
    "//base/security/appverify/interfaces/innerkits/appverify/include",
    "//third_party/googletest/googlemock/include",
    "//third_party/json/single_include",
  ]
}

tools_bm_mock_sources = [
  "${bundletool_test_path}/mock/mock_bundle_installer_host.cpp",
  "${bundletool_test_path}/mock/mock_bundle_mgr_host.cpp",
]

ohos_unittest("bm_command_dump_test") {
  module_out_path = module_output_path

  include_dirs = []

  sources = [
    "${bundletool_path}/src/bundle_command.cpp",
    "${bundletool_path}/src/shell_command.cpp",
    "${bundletool_path}/src/status_receiver_impl.cpp",
    "${kits_path}/js/bundlemgr/bundle_death_recipient.cpp",
    "bm_command_dump_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${bundletool_path}:tools_bm_config",
    ":tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${aafwk_path}/services/abilitymgr:abilityms",
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "resource_management:global_resmgr",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
}

ohos_unittest("bm_command_install_test") {
  module_out_path = module_output_path

  include_dirs = []

  sources = [
    "${bundletool_path}/src/bundle_command.cpp",
    "${bundletool_path}/src/shell_command.cpp",
    "${bundletool_path}/src/status_receiver_impl.cpp",
    "${kits_path}/js/bundlemgr/bundle_death_recipient.cpp",
    "bm_command_install_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${bundletool_path}:tools_bm_config",
    ":tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${aafwk_path}/services/abilitymgr:abilityms",
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "resource_management:global_resmgr",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
}

ohos_unittest("bm_command_test") {
  module_out_path = module_output_path

  include_dirs = []

  sources = [
    "${bundletool_path}/src/bundle_command.cpp",
    "${bundletool_path}/src/shell_command.cpp",
    "${bundletool_path}/src/status_receiver_impl.cpp",
    "${kits_path}/js/bundlemgr/bundle_death_recipient.cpp",
    "bm_command_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${bundletool_path}:tools_bm_config",
    ":tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${aafwk_path}/services/abilitymgr:abilityms",
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "resource_management:global_resmgr",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
}

ohos_unittest("bm_command_uninstall_test") {
  module_out_path = module_output_path

  include_dirs = []

  sources = [
    "${bundletool_path}/src/bundle_command.cpp",
    "${bundletool_path}/src/shell_command.cpp",
    "${bundletool_path}/src/status_receiver_impl.cpp",
    "${kits_path}/js/bundlemgr/bundle_death_recipient.cpp",
    "bm_command_uninstall_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${bundletool_path}:tools_bm_config",
    ":tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${aafwk_path}/services/abilitymgr:abilityms",
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "resource_management:global_resmgr",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
}

group("unittest") {
  testonly = true

  deps = [
    ":bm_command_dump_test",
    ":bm_command_install_test",
    ":bm_command_test",
    ":bm_command_uninstall_test",
  ]
}

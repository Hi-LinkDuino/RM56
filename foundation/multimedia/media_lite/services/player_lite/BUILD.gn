# Copyright (c) 2020 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/lite/config/component/lite_component.gni")

shared_library("player_impl") {
  sources = [
    "impl/buffersource/src/buffer_source.cpp",
    "impl/player_control/decoder/decoder.cpp",
    "impl/player_control/player/fsm/src/fsm_common.cpp",
    "impl/player_control/player/fsm/src/hi_fsm.cpp",
    "impl/player_control/player/fsm/src/hi_state.cpp",
    "impl/player_control/player/fsm/src/hi_state_machine.cpp",
    "impl/player_control/player/fsm/src/hi_state_machine_observer.cpp",
    "impl/player_control/player/fsm/src/message_looper.cpp",
    "impl/player_control/player/fsm/src/mmessage_pool.cpp",
    "impl/player_control/player/liteplayer.cpp",
    "impl/player_control/player/liteplayer_comm.cpp",
    "impl/player_control/player/liteplayer_state_machine.cpp",
    "impl/player_control/sink/player_audio_sink.cpp",
    "impl/player_control/sink/player_sink_manager.cpp",
    "impl/player_control/sink/player_sync.cpp",
    "impl/player_control/sink/player_video_sink.cpp",
    "impl/player_control/source/player_demux.cpp",
    "impl/player_control/source/player_source.cpp",
    "impl/player_impl.cpp",
  ]
  include_dirs = [
    "//third_party/bounds_checking_function/include",
    "//foundation/multimedia/utils/lite/hals",
    "//foundation/multimedia/utils/lite/interfaces/kits",
    "//drivers/peripheral/display/interfaces/include",
    "//drivers/peripheral/base",
    "//foundation/multimedia/media_lite/interfaces/innerkits",
  ]
  outdir = rebase_path("$root_out_dir")
  public_configs = [ ":player_impl_external_library_config" ]
  ldflags = [ "-L$outdir" ]
  ldflags += [ "-laudio_hw" ]
  ldflags += [ "-lcodec" ]
  ldflags += [ "-lformat_hw" ]
  ldflags += [ "-lhdi_videodisplayer" ]
  public_deps = [
    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
    "//foundation/graphic/surface:lite_surface",
    "//foundation/multimedia/utils/lite:media_common",
    "//third_party/bounds_checking_function:libsec_shared",
    "//third_party/iniparser:iniparser",
  ]
  ldflags += [ "-lstdc++" ]
  cflags = [
    "-fPIC",
    "-Wall",
    "-Wno-format",
  ]
  cflags_cc = cflags
}

config("player_impl_external_library_config") {
  include_dirs = [ "//foundation/multimedia/frameworks/player_lite/binder" ]
  include_dirs +=
      [ "//foundation/multimedia/media_lite/interfaces/kits/player_lite" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/buffersource/include" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/include" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/player" ]
  include_dirs += [ "//foundation/multimedia/utils/lite/interfaces/kits" ]
  include_dirs += [ "//drivers/peripheral/format/interfaces/include" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/player/fsm/src" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/player/fsm/include" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/source" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/sink" ]
  include_dirs += [ "//drivers/peripheral/codec/interfaces/include" ]
  include_dirs += [ "//foundation/multimedia/media_lite/services/player_lite/impl/player_control/decoder" ]
  include_dirs += [ "//drivers/peripheral/audio/interfaces/include" ]
}
shared_library("player_server") {
  sources = [
    "factory/src/player_factory.cpp",
    "server/src/player_server.cpp",
    "server/src/samgr_player_server.cpp",
  ]
  include_dirs = [
    "factory/include",
    "factory/include",
    "impl",
    "//drivers/peripheral/audio/interfaces/include",
    "//drivers/peripheral/codec/interfaces/include",
    "//drivers/peripheral/format/interfaces/include",
    "//drivers/peripheral/display/interfaces/include",
    "//drivers/peripheral/base",
    "//foundation/multimedia/histreamer/interface",
    "//foundation/multimedia/utils/lite/hals",
    "//foundation/multimedia/utils/lite/interfaces/kits",
    "//foundation/multimedia/media_lite/interfaces/innerkits",
    "//foundation/multimedia/media_lite/frameworks/player_lite/binder",
    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
    "//base/startup/syspara_lite/interfaces/kits/",
  ]
  outdir = rebase_path("$root_out_dir")
  public_configs = [ ":player_server_external_library_config" ]
  cflags = [
    "-fPIC",
    "-Wall",
    "-Wno-format",
  ]
  cflags_cc = cflags
  ldflags = [
    "-L$outdir",
    "-lstdc++",
    "-Wl,-rpath-link=$ohos_root_path/$root_out_dir",
    "-lcodec",
  ]
  deps = [
    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
    "//foundation/graphic/surface:lite_surface",
    "//foundation/multimedia/histreamer:histreamer",
  ]
  public_deps = [
    "//base/startup/syspara_lite/frameworks/parameter/src:sysparam",
    "//foundation/multimedia/media_lite/services/player_lite:player_impl",
    "//foundation/multimedia/utils/lite:media_common",
  ]
}

config("player_server_external_library_config") {
  include_dirs = [
    "//foundation/multimedia/media_lite/services/player_lite/server/include",
  ]
  include_dirs +=
      [ "//foundation/multimedia/media_lite/frameworks/player_lite/binder" ]
}

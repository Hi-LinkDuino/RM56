/**
 ****************************************************************************************
 *
 * @file gap_int.h
 *
 * @brief Generic Access Profile Internal Header - Shared by GAP manager and controller only
 *
 * Copyright (C) RivieraWaves 2009-2020
 *
 ****************************************************************************************
 */


#ifndef _GAP_INT_H_
#define _GAP_INT_H_

/**
 ****************************************************************************************
 * @addtogroup GAP_INT Generic Access Profile Internal
 * @ingroup GAP
 * @brief defines for internal GAP usage
 *
 *
 * @{
 ****************************************************************************************
 */

/*
 * INCLUDE FILES
 ****************************************************************************************
 */
#include "rwip_config.h"
#include "gap.h"
#include "co_bt.h"
#include "ke_task.h"

/*
 * DEFINES
 ****************************************************************************************
 */


/*
 * INTERNAL API TYPES
 ****************************************************************************************
 */


/*
 * MACROS
 ****************************************************************************************
 */



/*
 * TYPE DEFINITIONS
 ****************************************************************************************
 */


/*
 * GLOBAL VARIABLE DECLARATIONS
 ****************************************************************************************
 */


/*
 * FUNCTION DECLARATIONS
 ****************************************************************************************
 */



#if (BLE_CENTRAL || BLE_PERIPHERAL)
/**
 ****************************************************************************************
 * @brief Initialize Generic Access Profile Controller Module.
 *
 * @param[in] init_type  Type of initialization (@see enum rwip_init_type)
 *
 ****************************************************************************************
 */
void gapc_init(uint8_t init_type);


/**
 ****************************************************************************************
 * @brief Find a Connection index for BLE Connection Creation
 *
 * @return Connection index Available, GAP_INVALID_CONIDX if nothing found
 ****************************************************************************************
 */
uint8_t gapc_avail_conidx_find(void);


/**
 ****************************************************************************************
 * @brief A connection has been created, initialize Controller task.
 *
 * This function find first available task index available for new connection.
 * It triggers also connection event to task that has requested the connection.
 *
 * @param[in] conidx     Available connection index
 * @param[in] con_params Connection parameters from lower layers
 * @param[in] requester  Task that request the connection to send indication(s)
 * @param[in] laddr      Local BD Address
 * @param[in] laddr_type Local BD Address Type (PUBLIC or RAND)
 ****************************************************************************************
 */
void gapc_con_create(uint8_t conidx, struct hci_le_enh_con_cmp_evt const *con_params,
                     ke_task_id_t requester, gap_addr_t* laddr, uint8_t laddr_type);

/**
 ****************************************************************************************
 * @brief A connection has been disconnected, uninitialized Controller task.
 *
 * unregister connection, and destroy environment variable allocated for current connection.
 *
 * @param[in] conidx  Connection index
 ****************************************************************************************
 */
void gapc_con_cleanup(uint8_t conidx);

/**
 ****************************************************************************************
 * @brief Clean-up timers and deferred functions related to a specific connection.
 *
 * @param[in] conidx  Connection index
 ****************************************************************************************
 */
void gapc_sdt_cleanup(uint8_t conidx);

/**
 ****************************************************************************************
 * @brief Set resolvable address used for connection establishment as local address.
 *
 * @brief conidx    Connection index
 * @brief p_addr    Pointer to the resolvable address used by either advertising activity or
 * resolvable activity.
 ****************************************************************************************
 */
void gapc_set_local_addr(uint8_t conidx, uint8_t *p_addr);


/**
 ****************************************************************************************
 * @brief Get if local address is a resolvable address generated by controller
 *
 * @brief conidx    Connection index
 *
 * @return True if local address is a resolvable address generated by controller, false otherwise.
 ****************************************************************************************
 */
bool gapc_is_local_addr_rpa(uint8_t conidx);

/**
 ****************************************************************************************
 * @brief Retrieve local public address.
 *
 * @return Return local public address
 ****************************************************************************************
 */
gap_addr_t* gapm_get_bdaddr(void);

gap_addr_t* gapm_get_connected_bdaddr(uint8_t conidx);


/**
 ****************************************************************************************
 * @brief A link has been disconnected, clean-up host stack for this connection.
 *
 * @param[in] conidx     Connection Index
 * @param[in] conhdl     Connection Handle
 * @param[in] reason     Reason of the disconnection
 *
 ****************************************************************************************
 */
void gapm_con_cleanup(uint8_t conidx, uint16_t conhdl, uint8_t reason);


/**
 ****************************************************************************************
 * @brief Setup internal GAP/GATT service
 *
 * @param[in] att_cfg               Attribute database configuration (@see enum gapm_att_cfg_flag)
 * @param[in] gapc_svc_start_hdl     GAP service start handle
 * @param[in] gatt_svc_start_hdl    GATT service start handle
 * @param[in] central_res_en        True to enable central resolution characteristic
 *
 * @return Execution status (@see enum hl_err)
 ****************************************************************************************
 */
uint16_t gapc_svc_setup(uint16_t att_cfg, uint16_t gapc_svc_start_hdl, uint16_t gatt_svc_start_hdl, bool central_res_en);

#if (BLE_GATT_CLI)
/**
 ****************************************************************************************
 * @brief Setup internal GAP/GATT client
 *
 * @param[in] att_cfg Attribute database configuration (@see enum gapm_att_cfg_flag)
 *
 * @return Execution status (@see enum hl_err)
 ****************************************************************************************
 */
uint16_t gapc_cli_setup(uint16_t att_cfg);
#endif // (BLE_GATT_CLI)
#endif // (BLE_CENTRAL || BLE_PERIPHERAL)


/**
 ****************************************************************************************
 * @brief Retrieve Device Privacy Configuration (@see enum gapm_priv_cfg)
 *
 * @return address type
 ****************************************************************************************
 */
uint8_t gapm_priv_cfg_get(void);

/**
 ****************************************************************************************
 * @brief Retrieve device identity key.
 *
 * @return Device Identity Key
 ****************************************************************************************
 */
struct gap_sec_key* gapm_get_irk(void);


/**
 ****************************************************************************************
 * @brief Get information about a non connected activity
 *
 * @param[in] actv_idx          Activity Identifier
 * @param[in] p_act_type        Activity Type (enum gapm_actv_type)
 * @param[in] p_act_sub_type    Activity Sub Type, depends on activity
 * @param[in] p_handle          Lower Layer activity handle (adv_handle, sync_handle)
 *
 * @return GAP_ERR_NO_ERROR if activity exists else GAP_ERR_COMMAND_DISALLOWED
 ****************************************************************************************
 */
uint8_t gapm_actv_info_get(uint8_t actv_idx, uint8_t* p_act_type, uint8_t* p_act_sub_type, uint16_t *p_handle);

/**
 ****************************************************************************************
 * @brief Retrieve if Legacy pairing is supported on local device
 *
 * @return True if legacy pairing is supported
 ****************************************************************************************
 */
bool gapm_is_legacy_pairing_supp(void);


/**
 ****************************************************************************************
  * @brief Retrieve if Secure Connection pairing is supported on local device
 *
 * @return True if Secure Connection pairing is supported
 ****************************************************************************************
 */
bool gapm_is_sec_con_pairing_supp(void);


/// @} GAP_INT

#endif /* _GAP_INT_H_ */

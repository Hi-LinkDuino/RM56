# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
} else {
  import("//build/ohos.gni")
}
import("//drivers/adapter/uhdf2/uhdf.gni")
import("//drivers/peripheral/audio/audio.gni")

config("hdi_service_proxy_config") {
  visibility = [ ":*" ]

  cflags = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-DGST_DISABLE_DEPRECATED",
    "-DHAVE_CONFIG_H",
    "-fno-strict-aliasing",
    "-Wno-sign-compare",
    "-Wno-builtin-requires-header",
    "-Wno-implicit-function-declaration",
    "-Wno-format",
    "-Wno-int-conversion",
    "-Wno-unused-function",
    "-Wno-unused-parameter",
    "-Wno-thread-safety-attributes",
    "-Wno-inconsistent-missing-override",
    "-fno-rtti",
    "-fno-exceptions",
    "-ffunction-sections",
    "-fdata-sections",
  ]

  ldflags = [ "-Wl" ]
}

if ("$product_name" != "ohos-arm64") {
  import("//vendor/$product_company/$product_name/hals/audio/product.gni")
}
if (!defined(enable_hdf_proxy_stub) || enable_hdf_proxy_stub == true) {
  if (defined(ohos_lite)) {
    shared_library("hdi_audio_client") {
      include_dirs = [
        "//drivers/peripheral/audio/interfaces/include",
        "//drivers/peripheral/audio/hal/hdi_passthrough/include",
        "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
        "//drivers/peripheral/audio/hal/hdi_binder/server/include",
        "$hdf_framework_path/include/core",
        "$hdf_framework_path/include/utils",
        "$hdf_framework_path/include/osal",
        "$hdf_framework_path/ability/sbuf/include",
        "$hdf_framework_path/utils/include",
        "$hdf_framework_path/include",
        "$hdf_framework_path/core/sec/include",
        "$hdf_framework_path/core/shared/include",
        "$hdf_framework_path/core/host/include",
        "$hdf_framework_path/core/manager/include",
        "$hdf_framework_path/core/common/include/host/",
        "//third_party/cJSON",
        "//third_party/bounds_checking_function/include",
        "//drivers/adapter/khdf/liteos/osal/include",
        "$hdf_uhdf_path/shared/include",
        "$hdf_uhdf_path/include/hdi/",
        "$hdf_uhdf_path/host/include",
      ]

      sources = [
        "$hdf_framework_path/ability/sbuf/src/hdf_sbuf.c",
        "//drivers/peripheral/audio/hal/hdi_passthrough/src/audio_adapter_info_common.c",
        "//drivers/peripheral/audio/hal/hdi_passthrough/src/audio_common.c",
        "//third_party/cJSON/cJSON.c",
        "src/audio_proxy_adapter.c",
        "src/audio_proxy_capture.c",
        "src/audio_proxy_common.c",
        "src/audio_proxy_manager.c",
        "src/audio_proxy_render.c",
      ]

      deps = [
        "//drivers/peripheral/audio/hal/hdi_passthrough:hdi_audio",
        "//third_party/bounds_checking_function:libsec_shared",
      ]

      if (enable_audio_hal_hdf_log) {
        defines = [ "AUDIO_HAL_HDF_LOG" ]
      }

      public_configs = [ ":hdi_service_proxy_config" ]
    }

    lite_component("hdi_audio") {
      features = [ ":hdi_audio_client" ]
    }
  } else {
    ohos_shared_library("hdi_audio_client") {
      include_dirs = [
        "//drivers/peripheral/audio/interfaces/include",
        "//drivers/peripheral/audio/hal/hdi_passthrough/include",
        "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
        "//drivers/peripheral/audio/hal/hdi_binder/server/include",
        "//third_party/cJSON",
        "//third_party/bounds_checking_function/include",
      ]

      sources = [
        "//drivers/peripheral/audio/hal/hdi_passthrough/src/audio_adapter_info_common.c",
        "//drivers/peripheral/audio/hal/hdi_passthrough/src/audio_common.c",
        "//third_party/cJSON/cJSON.c",
        "src/audio_proxy_adapter.c",
        "src/audio_proxy_capture.c",
        "src/audio_proxy_common.c",
        "src/audio_proxy_manager.c",
        "src/audio_proxy_render.c",
      ]

      deps = [ "//drivers/peripheral/audio/hal/hdi_passthrough:hdi_audio" ]

      if (is_standard_system) {
        external_deps = [
          "device_driver_framework:libhdf_host",
          "device_driver_framework:libhdf_ipc_adapter",
          "device_driver_framework:libhdf_utils",
          "device_driver_framework:libhdi",
          "hiviewdfx_hilog_native:libhilog",
          "utils_base:utils",
        ]
      } else {
        external_deps = [ "hilog:libhilog" ]
      }

      if (enable_audio_hal_hdf_log) {
        defines = [ "AUDIO_HAL_HDF_LOG" ]
      }

      public_configs = [ ":hdi_service_proxy_config" ]

      install_images = [ chipset_base_dir ]
      subsystem_name = "hdf"
      part_name = "audio_device_driver"
    }
  }
}

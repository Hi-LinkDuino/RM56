# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/adapter/uhdf2/uhdf.gni")
import("//drivers/peripheral/audio/audio.gni")

if (defined(ohos_lite)) {
  ohos_executable("audio_sample_render") {
    include_dirs = [
      "//drivers/peripheral/audio/interfaces/include",
      "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
      "//utils/native/base/include",
      "//third_party/bounds_checking_function/include",
    ]

    sources = [ "framework_render.c" ]

    deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
    external_deps = [ "device_driver_framework:libhdf_utils" ]
    defines = []
    if (enable_audio_device_mpi) {
      defines += [ "AUDIO_HAL_USER" ]
    }
    install_enable = true
    subsystem_name = "hdf"
    part_name = "audio_device_driver"
  }

  ohos_executable("audio_sample_capture") {
    include_dirs = [
      "//drivers/peripheral/audio/interfaces/include",
      "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
      "//utils/native/base/include",
      "//third_party/bounds_checking_function/include",
      "//drivers/peripheral/audio/hal/hdi_binder/server/include",
    ]

    sources = [ "framework_capture.c" ]

    deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
    external_deps = [ "device_driver_framework:libhdf_utils" ]
    defines = []
    if (enable_audio_device_mpi) {
      defines += [ "AUDIO_HAL_USER" ]
    }
    install_enable = true
    subsystem_name = "hdf"
    part_name = "audio_device_driver"
  }
} else {
  ohos_executable("audio_sample_render") {
    include_dirs = [
      "//drivers/peripheral/audio/interfaces/include",
      "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
    ]

    sources = [ "framework_render.c" ]

    defines = []
    if (enable_audio_device_mpi) {
      defines += [ "AUDIO_HAL_USER" ]
    }

    if (is_standard_system) {
      external_deps = [
        "device_driver_framework:libhdf_host",
        "device_driver_framework:libhdf_ipc_adapter",
        "device_driver_framework:libhdf_utils",
        "device_driver_framework:libhdi",
        "hiviewdfx_hilog_native:libhilog",
        "utils_base:utils",
      ]
    } else {
      external_deps = [ "hilog:libhilog" ]
    }

    install_enable = true
    install_images = [ chipset_base_dir ]
    subsystem_name = "hdf"
    part_name = "audio_device_driver"
  }

  ohos_executable("audio_sample_capture") {
    include_dirs = [
      "//drivers/peripheral/audio/interfaces/include",
      "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
      "//drivers/peripheral/audio/hal/hdi_binder/server/include",
    ]

    sources = [ "framework_capture.c" ]

    defines = []
    if (enable_audio_device_mpi) {
      defines += [ "AUDIO_HAL_USER" ]
    }

    if (is_standard_system) {
      deps = [
        "//drivers/peripheral/audio/hal/hdi_binder/server:hdi_audio_server",
      ]
      external_deps = [
        "device_driver_framework:libhdf_host",
        "device_driver_framework:libhdf_ipc_adapter",
        "device_driver_framework:libhdf_utils",
        "device_driver_framework:libhdi",
        "hiviewdfx_hilog_native:libhilog",
        "utils_base:utils",
      ]
    } else {
      external_deps = [ "hilog:libhilog" ]
    }

    install_enable = true
    install_images = [ chipset_base_dir ]
    subsystem_name = "hdf"
    part_name = "audio_device_driver"
  }
}

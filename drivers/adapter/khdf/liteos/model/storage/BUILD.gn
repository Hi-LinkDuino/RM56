# Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//drivers/adapter/khdf/liteos/hdf.gni")

module_switch = defined(LOSCFG_DRIVERS_HDF_STORAGE)
module_name = "hdf_storage_driver"
hdf_driver(module_name) {
  FRAMEWORKS_STORAGE_ROOT = "$HDF_FRAMEWORKS_PATH/model/storage"

  include_dirs = [ "//base/hiviewdfx/interfaces/kits" ]

  sources = []

  if (defined(LOSCFG_DRIVERS_HDF_PLATFORM_MMC)) {
    sources += [
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_block.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_core.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_dispatch.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_emmc.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_if.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_protocol.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mmc/mmc_sdio.c",
      "src/mmc/mmc_block_lite.c",
    ]
  }

  if (defined(LOSCFG_DRIVERS_HDF_PLATFORM_SDIO)) {
    sources += [ "$HDF_FRAMEWORKS_PATH/model/storage/src/mmc/sdio_if.c" ]
  }

  if (defined(LOSCFG_DRIVERS_HDF_PLATFORM_EMMC)) {
    sources += [ "$HDF_FRAMEWORKS_PATH/model/storage/src/mmc/emmc_if.c" ]
  }

  if (defined(LOSCFG_DRIVERS_HDF_STORAGE_MTD)) {
    sources += [
      "$FRAMEWORKS_STORAGE_ROOT/src/mtd/mtd_block.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mtd/mtd_char.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mtd/mtd_core.c",
      "$FRAMEWORKS_STORAGE_ROOT/src/mtd/mtd_spi_common.c",
      "src/mtd/mtd_block_lite.c",
      "src/mtd/mtd_char_lite.c",
      "src/mtd/mtd_legacy_lite.c",
    ]
  }

  public_configs = [ ":public" ]
}

config("public") {
  include_dirs = [
    "include",
    "include/mmc",
    "include/mtd",
    "$HDF_FRAMEWORKS_PATH/model/storage/include",
    "$HDF_FRAMEWORKS_PATH/model/storage/include/mmc",
    "$HDF_FRAMEWORKS_PATH/model/storage/include/mtd",
  ]
}
